        -:    0:Source:funcao_teste.c
        -:    0:Graph:obj/funcao_teste.gcno
        -:    0:Data:obj/funcao_teste.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include"funcao.c"
        -:    4:#include<gtest/gtest.h>
        -:    5:
       10:    6:TEST(converte,excessoes){/**< testes para verificar se a função aceita ou não qualquer string */
        2:    7:	EXPECT_EQ(-1,converte_romano("ABCDE"));
        2:    8:	EXPECT_EQ(-1,converte_romano("FGHIJ"));
        2:    9:	EXPECT_EQ(-1,converte_romano("KLNMO"));
        2:   10:	EXPECT_EQ(-1,converte_romano("PQRST"));
        2:   11:	EXPECT_EQ(-1,converte_romano("UVWXYZ"));
        2:   12:	EXPECT_EQ(-1,converte_romano("ROGE"));
        2:   13:	EXPECT_EQ(-1,converte_romano("BEBA"));
        2:   14:	EXPECT_EQ(-1,converte_romano("BUMBA"));
        2:   15:}
        -:   16:
       10:   17:TEST(converte,numeros_errados){/**< testes para verificar se a função aceita ou não qualquer números inválidos */
        2:   18:	EXPECT_EQ(-1,converte_romano("XXXIXIX"));
        2:   19:	EXPECT_EQ(-1,converte_romano("MXIMXI"));
        2:   20:	EXPECT_EQ(-1,converte_romano("XMICMCIX"));
        2:   21:	EXPECT_EQ(-1,converte_romano("MLXMCD"));
        2:   22:	EXPECT_EQ(-1,converte_romano("MXLMXCIIV"));
        2:   23:	EXPECT_EQ(-1,converte_romano("MIXMIMLCV"));
        2:   24:	EXPECT_EQ(-1,converte_romano("IIIXMCC"));
        2:   25:	EXPECT_EQ(-1,converte_romano("MCMLMC"));
        2:   26:}
        -:   27:
       10:   28:TEST(converte,unidades){/**< testes para verificar se a função converte corretamente unidades */
        2:   29:	EXPECT_EQ(1,converte_romano("I"));
        2:   30:	EXPECT_EQ(2,converte_romano("II"));
        2:   31:	EXPECT_EQ(3,converte_romano("III"));
        2:   32:	EXPECT_EQ(4,converte_romano("IV"));
        2:   33:	EXPECT_EQ(5,converte_romano("V"));
        2:   34:	EXPECT_EQ(6,converte_romano("VI"));
        2:   35:	EXPECT_EQ(7,converte_romano("VII"));
        2:   36:	EXPECT_EQ(8,converte_romano("VIII"));
        2:   37:	EXPECT_EQ(9,converte_romano("IX"));
        2:   38:}
        -:   39:
       10:   40:TEST(converte,dezenas){/**< testes para verificar se a função converte corretamente dezenas */
        2:   41:	EXPECT_EQ(10,converte_romano("X"));
        2:   42:	EXPECT_EQ(20,converte_romano("XX"));
        2:   43:	EXPECT_EQ(30,converte_romano("XXX"));
        2:   44:	EXPECT_EQ(40,converte_romano("XL"));
        2:   45:	EXPECT_EQ(50,converte_romano("L"));
        2:   46:	EXPECT_EQ(60,converte_romano("LX"));
        2:   47:	EXPECT_EQ(70,converte_romano("LXX"));
        2:   48:	EXPECT_EQ(80,converte_romano("LXXX"));
        2:   49:	EXPECT_EQ(90,converte_romano("XC"));
        2:   50:}
        -:   51:
       10:   52:TEST(converte,centenas){/**< testes para verificar se a função converte corretamente centenas */
        2:   53:	EXPECT_EQ(100,converte_romano("C"));
        2:   54:	EXPECT_EQ(200,converte_romano("CC"));
        2:   55:	EXPECT_EQ(300,converte_romano("CCC"));
        2:   56:	EXPECT_EQ(400,converte_romano("CD"));
        2:   57:	EXPECT_EQ(500,converte_romano("D"));
        2:   58:	EXPECT_EQ(600,converte_romano("DC"));
        2:   59:	EXPECT_EQ(700,converte_romano("DCC"));
        2:   60:	EXPECT_EQ(800,converte_romano("DCCC"));
        2:   61:	EXPECT_EQ(900,converte_romano("CM"));
        2:   62:}
        -:   63:
       10:   64:TEST(converte,milhares){/**< testes para verificar se a função converte corretamente milhares */
        2:   65:	EXPECT_EQ(1000,converte_romano("M"));
        2:   66:	EXPECT_EQ(2000,converte_romano("MM"));
        2:   67:	EXPECT_EQ(3000,converte_romano("MMM"));
        2:   68:}
        -:   69:
       10:   70:TEST(converte,aleatorios){/**< testes para verificar se a função converte corretamente números aleatórios */
        2:   71:	EXPECT_EQ(18,converte_romano("XVIII"));
        2:   72:	EXPECT_EQ(34,converte_romano("XXXIV"));
        2:   73:	EXPECT_EQ(41,converte_romano("XLI"));
        2:   74:	EXPECT_EQ(56,converte_romano("LVI"));
        2:   75:	EXPECT_EQ(97,converte_romano("XCVII"));
        2:   76:	EXPECT_EQ(132,converte_romano("CXXXII"));
        2:   77:	EXPECT_EQ(217,converte_romano("CCXVII"));
        2:   78:	EXPECT_EQ(324,converte_romano("CCCXXIV"));
        2:   79:	EXPECT_EQ(477,converte_romano("CDLXXVII"));
        2:   80:	EXPECT_EQ(531,converte_romano("DXXXI"));
        2:   81:	EXPECT_EQ(689,converte_romano("DCLXXXIX"));
        2:   82:	EXPECT_EQ(725,converte_romano("DCCXXV"));
        2:   83:	EXPECT_EQ(863,converte_romano("DCCCLXIII"));
        2:   84:	EXPECT_EQ(961,converte_romano("CMLXI"));
        2:   85:	EXPECT_EQ(1307,converte_romano("MCCCVII"));
        2:   86:	EXPECT_EQ(1422,converte_romano("MCDXXII"));
        2:   87:	EXPECT_EQ(1666,converte_romano("MDCLXVI"));
        2:   88:	EXPECT_EQ(1711,converte_romano("MDCCXI"));
        2:   89:	EXPECT_EQ(2313,converte_romano("MMCCCXIII"));
        2:   90:	EXPECT_EQ(2771,converte_romano("MMDCCLXXI"));	
        2:   91:}
        -:   92:
        2:   93:int main(int argc, char **argv){
        2:   94:	::testing::InitGoogleTest(&argc, argv); 
        2:   95:	return RUN_ALL_TESTS(); 
        6:   96:}
        -:   97:
        -:   98:/**
        -:   99:	@file
        -:  100:	@brief esse arquivo contém os testes.
        -:  101:*/
