        -:    0:Source:funcao.c
        -:    0:Graph:obj/funcao_teste.gcno
        -:    0:Data:obj/funcao_teste.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include<string.h>
        -:    4:/**
        -:    5:	Compara dois números baseados nos caractéres romanos e compara para fazer uma operação satisfatória.
        -:    6:	Falta ainda implementar mais excessões para o código, porém o tempo é curto.
        -:    7:	@param um número que vai ser analisado, o seu antecessor na string, e número adquirido anteriormente por essa função.
        -:    8:	@return um inteiro que satisfaz a operação da combinação de dois números.
      500:    9:*/
      500:   10:int compara(int numero, int ultimo, int ultimo_numero){
       70:   11:	if(ultimo>numero)
        -:   12:		return ultimo_numero-numero;
      430:   13:	else
        -:   14:		return ultimo_numero+numero;
        -:   15:}
        -:   16:/**
        -:   17:	Retorna um inteiro baseado em um número romano. O algoritmo lê a string de trás para frente e identifica a letra,
        -:   18:	depois, ele chama a função compara para fazer uma operação satisfatória em como se lê os números romanos. Ele também
        -:   19:	identifica se há uma letra diferente das aceitas, nesse caso, a função retorna -1. A função também retorna -1 caso o
        -:   20:	número seja maior que 3000 ou menor que zero. 
        -:   21:	@param uma string qualquer.
        -:   22:	@return um inteiro equivalente em romano.
      132:   23:*/
      132:   24:int converte_romano(const char romano[]){
      132:   25:	int i=0;
      132:   26:	int num_anterior=0;
      632:   27:	int numero=0;
      516:   28:	for(i=strlen(romano)-1;i>=0;i--){
        -:   29:		switch(romano[i]){
        -:   30:			
      116:   31:			case'I':
      116:   32:				numero=compara(1,num_anterior,numero);
      116:   33:				num_anterior=1;
        -:   34:				break;
       34:   35:			case'V':
       34:   36:				numero=compara(5,num_anterior,numero);
       34:   37:				num_anterior=5;
        -:   38:				break;
      122:   39:			case'X':
      122:   40:				numero=compara(10,num_anterior,numero);
      122:   41:				num_anterior=10;
        -:   42:				break;
       34:   43:			case'L':
       34:   44:				numero=compara(50,num_anterior,numero);
       34:   45:				num_anterior=50;
        -:   46:				break;
      102:   47:			case'C':
      102:   48:				numero=compara(100,num_anterior,numero);
      102:   49:				num_anterior=100;
        -:   50:				break;
       30:   51:			case'D':
       30:   52:				numero=compara(500,num_anterior,numero);
       30:   53:				num_anterior=500;
        -:   54:				break;
       62:   55:			case'M':
       62:   56:				numero=compara(1000,num_anterior,numero);
       62:   57:				num_anterior=1000;
        -:   58:				break;
       16:   59:			default:
        -:   60:				return -1;
        -:   61:				break;	
        -:   62:		}	
      116:   63:	}
        2:   64:	if((numero>3000)||(numero<0))
        -:   65:		return -1;
      114:   66:	else
        -:   67:		return numero;
        -:   68:}
        -:   69:
        -:   70:/**
        -:   71:	@file
        -:   72:	@brief esse arquivo contém a implementação da função.
        -:   73:*/
        -:   74:
